/*****************************************************************//**
 * \file   Camera.h
 * \brief  カメラクラス
 * 
 * \author Hiroto Kuge
 * \date   December 2022
 *********************************************************************/
#pragma once

//=============================================================================
// Includes.
//=============================================================================
#include "../Util/Matrix.h"
#include "../Util/Vector.h"
#include <memory>

//=============================================================================
// CameraClass
//=============================================================================
class Camera {
	//-----------------------------------------------------------------------------
	// list of friends classes and methods.
	//-----------------------------------------------------------------------------	
	//!{
			/* Noting*/
	//!} 
public:
	//-----------------------------------------------------------------------------
	// public variables.
	//-----------------------------------------------------------------------------
	//!{
			/* Nothing */
	//!} 
	//-----------------------------------------------------------------------------
	// public methods.
	//-----------------------------------------------------------------------------
	//!{
public:
	/// <summary>
	/// 射影行列の更新方法 
	/// </summary>
	
	//=============================================================================
	// プロジェクション行列の更新方法
	//=============================================================================
	enum EnUpdateProjMatrixFunc {
		enUpdateProjMatrixFunc_Perspective,		// 透視射影行列：遠近法が効いた絵を作りたいならこっち
		enUpdateProjMatrixFunc_Ortho,			// 平行投影：２Ｄ的な表現がしたいならこっち
	};
	
	/*****************************************************************//**
	 * \brief 更新処理
	 *********************************************************************/
	void Update();
	
	/*****************************************************************//**
	 * \brief 注視点を原点としてカメラを回転
	 * 
	 * \param qRot 回転を示すクオータニオン
	 *********************************************************************/
	void RotateOriginTarget(const Quaternion& qRot);

	/*****************************************************************//**
	 * \brief カメラを動かす
	 * 
	 * \param move 移動量
	 *********************************************************************/
	void Move(const Vector3& move){
		m_position += move;
		m_target += move;
		m_isDirty = true;
	}

	/*****************************************************************//**
	 * \brief 注視店を動かす
	 * 
	 * \param move 移動量
	 *********************************************************************/
	void MoveTarget(const Vector3& move){
		m_target += move;
		m_isDirty = true;
	}
	
	/*****************************************************************//**
	 * \brief カメラの座標を動かす
	 * 
	 * \param move 移動量
	 *********************************************************************/
	void MovePosition(const Vector3& move){
		m_position += move;
		m_isDirty = true;
	}
	
	/*****************************************************************//**
	 * \brief カメラの前方向に移動
	 * 
	 * \param moveForward 移動量
	 *********************************************************************/
	void MoveForward(float moveForward){
		Move(m_forward * moveForward);
	}
	
	/*****************************************************************//**
	 * \brief カメラの右方向に移動
	 * \param moveRight
	 *********************************************************************/
	void MoveRight(float moveRight){
		Move(m_right * moveRight);
	}
	
	/*****************************************************************//**
	 * \brief カメラの上方向に移動
	 * 
	 * \param moveUp 移動量
	 *********************************************************************/
	void MoveUp(float moveUp){
		Move(m_up * moveUp);
	}
	
	/*****************************************************************//**
	 * \brief カメラの座標を変更
	 * 
	 * \param pos 設定座標
	 *********************************************************************/
	void SetPosition(const Vector3& pos){
		m_position = pos;
		m_isDirty = true;
	}
	void SetPosition(float x, float y, float z){
		SetPosition({ x, y, z });
	}

	/*****************************************************************//**
	 * \brief カメラ座標を取得
	 * 
	 * \return 座標 
	 *********************************************************************/
	const Vector3& GetPosition() const{
		return m_position;
	}
	
	/*****************************************************************//**
	 * \brief 注視点を設定
	 * 
	 * \param target 注視店
	 *********************************************************************/
	void SetTarget(const Vector3& target){
		m_target = target;
		m_isDirty = true;
	}
	void SetTarget(float x, float y, float z){
		SetTarget({ x, y, z });
	}

	/*****************************************************************//**
	 * \brief 注視点を取得
	 *  
	 * \return 注視点
	 *********************************************************************/
	const Vector3& GetTarget() const{
		return m_target;
	}

	/*****************************************************************//**
	 * \brief カメラの上方向を設定
	 * \param up 設定値
	 *********************************************************************/
	void SetUp(const Vector3& up){
		m_up = up;
		m_up.Normalize();
	}
	void SetUp(float x, float y, float z)
	{
		SetUp({ x, y, z });
	}

	/*****************************************************************//**
	 * \brief カメラの上方向を取得
	 * 
	 * \return カメラの上方向
	 *********************************************************************/
	const Vector3& GetUp() const{
		return m_up;
	}

	/*****************************************************************//**
	 * \brief ビュー変換行列の逆行列を取得
	 * 
	 * \return ビュー変換行列の逆行列
	 *********************************************************************/
	const Matrix& GetViewMatrixInv(){
		if (m_isDirty) {
			//更新する必要がある
			Update();
		}
		return m_viewMatrixInv;
	}

	/*****************************************************************//**
	 * \brief ビュー変換行列を取得
	 *  
	 * \return ビュー変換行列
	 *********************************************************************/
	const Matrix& GetViewMatrix(){
		if (m_isDirty) {
			//更新する必要がある
			Update();
		}
		return m_viewMatrix;
	}

	/*****************************************************************//**
	 * \brief プロジェクション変換行列を取得
	 * 
	 * \return プロジェクション変換行列
	 *********************************************************************/
	const Matrix& GetProjectionMatrix(){
		if (m_isDirty) {
			//更新する必要がある
			Update();
		}
		return m_projectionMatrix;
	}

	/*****************************************************************//**
	 * \brief ビュー×プロジェクション変換行列を取得
	 * 
	 * \return ビュー×プロジェクション変換行列
	 *********************************************************************/
	const Matrix& GetViewProjectionMatrix()	{
		if (m_isDirty) {
			//更新する必要がある
			Update();
		}
		return m_viewProjectionMatrix;
	}
	
	/*****************************************************************//**
	 * \brief カメラの変換行列を取得
	 * 
	 * \return カメラの変換行列
	 *********************************************************************/
	const Matrix& GetCameraRotation(){
		if (m_isDirty) {
			//更新する必要がある
			Update();
		}
		return m_cameraRotation;
	}
	
	/*****************************************************************//**
	 * \brief ファークリップ(遠平面までの距離)を設定
	 * 
	 * \param fFar 設定値
	 *********************************************************************/
	void SetFar(float fFar){
		m_far = fFar;
		m_isDirty = true;
	}
	
	/*****************************************************************//**
	 * \brief ニアクリップ(近平面までの距離)を設定
	 * 
	 * \param fNear 設定値
	 *********************************************************************/
	void SetNear(float fNear){
		m_near = fNear;
		m_isDirty = true;
	}

	/*****************************************************************//**
	 * \brief ファークリップ(遠平面までの距離)を取得
	 * 
	 * \return ファークリップ 
	 *********************************************************************/
	float GetFar() const{
		return m_far;
	}

	/*****************************************************************//**
	 * \brief ニアクリップ(近平面までの距離)を取得
	 * 
	 * \return ニアクリップ 
	 *********************************************************************/
	float GetNear() const{
		return m_near;
	}

	/*****************************************************************//**
	 * \brief プロジェクションの幅を設定
	 * 
	 * \param w 設定値
	 * \memo プロジェクション行列の更新方法で平行投影が設定されているときに使用される
	 *********************************************************************/
	void SetWidth(float w){
		m_width = w;
		m_isDirty = true;
	}
	
	/*****************************************************************//**
	 * \brief プロジェクション変換行列の高さを設定
	 * 
	 * \param h 設定値
	 * \memo プロジェクション行列の更新方法で平行投影が設定されているときに使用される
	 *********************************************************************/
	void SetHeight(float h){
		m_height = h;
		m_isDirty = true;
	}

	/*****************************************************************//**
	 * \brief 平行投影の幅を取得
	 * 
	 * \return 平行投影の幅
	 *********************************************************************/
	float GetWidth() const{
		return m_width;
	}

	/*****************************************************************//**
	 * \brief 平行投影の高さを取得
	 * 
	 * \return 平行投影の高さ
	 *********************************************************************/
	float GetHeight() const{
		return m_height;
	}
	
	/*****************************************************************//**
	 * \brief プロジェクション変換の更新方法を設定
	 * 
	 * \param func 更新方法
	 *********************************************************************/
	void SetUpdateProjMatrixFunc(EnUpdateProjMatrixFunc func){
		m_updateProjMatrixFunc = func;
		m_isDirty = true;
	}

	/*****************************************************************//**
	 * \brief 画角を設定
	 * 
	 * \param viewAngle 画角(Radian)
	 *********************************************************************/
	void SetViewAngle(float viewAngle){
		m_viewAngle = viewAngle;
		m_isDirty = true;
	}
	
	/*****************************************************************//**
	 * \brief 画角を取得
	 * 
	 * \return 画角(Radian)
	 *********************************************************************/
	float GetViewAngle() const{
		return m_viewAngle;
	}
	
	/*****************************************************************//**
	 * \brief 注視点とカメラ座標の距離を取得
	 * 
	 * \return 距離
	 *********************************************************************/
	float GetTargetToPositionLength() const{
		return m_targetToPositionLen;
	}
	
	/*****************************************************************//**
	 * \brief カメラの前方向を取得
	 * 
	 * \return カメラの前方向
	 *********************************************************************/
	const Vector3& GetForward() const{
		return m_forward;
	}
	
	/*****************************************************************//**
	 * \brief カメラの右方向を取得
	 * 
	 * \return カメラの右方向
	 *********************************************************************/
	const Vector3& GetRight() const{
		return m_right;
	}

	/*****************************************************************//**
	 * \brief アスペクト比を取得
	 * 
	 * \return アスペクト比
	 *********************************************************************/
	float GetAspect() const{
		return m_aspect;
	}

	/*****************************************************************//**
	 * \brief カメラをコピーする
	 * 
	 * \param dst コピー先
	 *********************************************************************/
	void CopyTo(Camera& dst){
		memcpy(&dst, this, sizeof(dst));
		m_isDirty = true;
	}

	/*****************************************************************//**
	 * \brief ワールド座標からスクリーン座標を計算
	 * 
	 * \param screenPos スクリーン座標の格納先
	 * \param worldPos  ワールド座標
	 * 
	 * \memo 計算されるスクリーン座標は画面の中心を{0,0}
	 *		 左上を{画面の幅*-0.5,画面の高さ*-0.5}
	 *		 右下を{ 画面の幅 * 0.5,画面の高さ * 0.5 }とする座標系
	 *********************************************************************/
	void CalcScreenPositionFromWorldPosition(Vector2& screenPos, const Vector3& worldPos) const;
	//!} 
	//!{ 
protected:
	//-----------------------------------------------------------------------------
	// protected variables.
	//-----------------------------------------------------------------------------
	//!{
			/* Nothing */
	//!}
	//-----------------------------------------------------------------------------
	// protected methods.
	//----------------------------------------------------------------------------- 
	//!{
	
	float		m_targetToPositionLen = 1.0f;			// 注視点と視点まで距離 
	Vector3		m_position = { 0.0f, 0.0f, 1.0f };		// カメラ位置 
	Vector3		m_up = g_vec3Up;						// カメラの上方向 
	Vector3		m_target;								// カメラの中止点 
	Matrix		m_viewMatrix;							// ビュー行列 
	Matrix		m_projectionMatrix;						// プロジェクション行列 
	Matrix		m_viewProjectionMatrix;					// ビュープロジェクション行列 
	Matrix		m_viewMatrixInv;						// ビュー行列の逆行列 
	Matrix		m_cameraRotation;						// カメラの回転行列 
	Vector3		m_forward = g_vec3Front;				// カメラの前方 
	Vector3		m_right = g_vec3Right;					// カメラの右 
	float		m_near = 1.0f;							// 近平面 
	float		m_far = 5000.0f;						// 遠平面 
	float		m_viewAngle = Math::DegToRad(60.0f);	// 画角(ラジアン) 
	float		m_aspect = 1.0f;						// アスペクト比 
	float		m_width = 1280.0f;						// 平行投影行列を作成するときに使用される幅 
	float		m_height = 720.0f;						// 平行投影行列を作成するときに使用される高さ 
	bool		m_isNeedUpdateProjectionMatrix = true;	// プロジェクション変換行列の更新が必要かどうか
	bool		m_isDirty = false;						// ダーティフラグ 

	EnUpdateProjMatrixFunc m_updateProjMatrixFunc = enUpdateProjMatrixFunc_Perspective;	//プロジェクション行列の更新方法
	
																						//!} 
private:
	//-----------------------------------------------------------------------------
	// private variables.
	//-----------------------------------------------------------------------------
	//!{
			/* Nothing */
	//!}
	//-----------------------------------------------------------------------------
	// private methods.
	//----------------------------------------------------------------------------- 
	//!{
			/* Nothing */
	//!} 
};
