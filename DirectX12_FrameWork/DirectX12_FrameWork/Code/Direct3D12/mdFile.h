/*****************************************************************//**
 * \file   mdFile.h
 * \brief  .mdファイルクラス
 * 
 * \author Hiroto Kuge
 * \date   March 2023
 * 
 * \memo .mdは独自規格の3Dモデルフォーマット
 *********************************************************************/

#pragma once

//=============================================================================
// .mdFile Class
//=============================================================================
class mdFile{
	//-----------------------------------------------------------------------------
	// list of friends classes and methods.
	//-----------------------------------------------------------------------------	
	//!{
			/* Nothing */
	//!} 
public:
	//-----------------------------------------------------------------------------
	// public variables.
	//-----------------------------------------------------------------------------
	//!{
			/* Nothing */
	//!} 
	//-----------------------------------------------------------------------------
	// public methods.
	//-----------------------------------------------------------------------------
	//!{
	//=============================================================================
	// MD_Material:マテリアルデータの構造体
	//=============================================================================
	struct MD_Material {
		std::string albedoMapFileName;			//アルベドマップのファイル名
		std::string normalMapFileName;			//法線マップのファイル名
		std::string specularMapFileName;		//スペキュラマップのファイル名
		std::string reflectionMapFileName;		//リフレクションマップのファイル名
		std::string refractionMapFileName;		//屈折マップのファイル名
		std::unique_ptr<char[]>	albedoMap;		//ロードされたアルベドマップ：.dds
		unsigned int albedoMapSize;				//アルベドマップのサイズ：.dds
		std::unique_ptr<char[]>	normalMap;		//ロードされた法線マップ：.dds
		unsigned int normalMapSize;				//法線マップのサイズ
		std::unique_ptr<char[]>	specularMap;	//ロードされたスペキュラマップ：.dds
		unsigned int specularMapSize;			//スペキュラマップのサイズ：.dds
		std::unique_ptr<char[]>	reflectionMap;	//ロードされたリフレクションマップ：.dds
		unsigned int reflectionMapSize;			//リフレクションマップのサイズ：.dds
		std::unique_ptr<char[]>	refractionMap;	//ロードされた屈折マップ：.dds
		unsigned int refractionMapSize;			//屈折マップのサイズ：.dds
		std::string albedoMapFilePath;			//アルベドマップのファイルパス
		std::string normalMapFilePath;			//法線マップのファイルパス
		std::string specularMapFilePath;		//スペキュラマップのファイルパス
		std::string reflectionMapFilePath;		//リフレクションマップのファイルパス
		std::string refractionMapFilePath;		//屈折マップのファイルパス
	};

	//=============================================================================
	// MD_Vertex:頂点データの構造体
	//=============================================================================
	struct MD_Vertex {
		Vector3 pos;			//座標
		Vector3 normal;			//法線
		Vector3 tangent;		//接ベクトル
		Vector3 binormal;		//従ベクトル
		Vector2 uv;				//UV座標
	};

	//=============================================================================
	// MD_IndexBuffer16:インデックス(16bit)
	//=============================================================================
	struct MD_Index16{
		std::vector<uint16_t> indices;
	};

	//=============================================================================
	// MD_IndexBuffer16:インデックス(32bit)
	//=============================================================================
	struct MD_Index32 {
		std::vector<uint32_t> indices;
	};

	//=============================================================================
	// MD_UnitMesh:単位メッシュ
	//=============================================================================
	struct MD_UnitMesh{
		std::vector<MD_Material> materials;
		std::vector<MD_Vertex>	 vertices;
		std::vector<MD_Index16>  indecies16;
		std::vector<MD_Index32>  indecies32;
	};

	/*****************************************************************//**
	 * \brief 3Dモデルをロード
	 * 
	 * \param filePath .mdファイルのパス
	 *********************************************************************/
	void Load(const char* filePath);
	void Load(const wchar_t* filePath);


	/*****************************************************************//**
	 * \brief 単位メッシュに対してクエリを行う
	 * 
	 * \param func クエリ関数
	 * \memo この関数はすべてのメッシュに対して同じ操作をしたいときに使います
	 *********************************************************************/
	void QueryUnitMesh(std::function<void(const MD_UnitMesh& mesh)> func) const{
		for (auto& mesh : m_meshes) {
			func(mesh);
		}
	}

	/*****************************************************************//**
	 * \brief メッシュの配列を取得
	 * 
	 * \return メッシュ配列の先頭アドレス
	 *********************************************************************/
	const std::vector<MD_UnitMesh>& GetMeshes() {
		return m_meshes;
	}

	/*****************************************************************//**
	 * \brief メッシュの数を取得
	 * 
	 * \return メッシュ数
	 *********************************************************************/
	uint32_t GetMeshNum()const {
		return uint32_t(m_meshes.size());
	}

	//!} 
private:
	//-----------------------------------------------------------------------------
	// private variables.
	//-----------------------------------------------------------------------------
	//!{
	
	std::vector<MD_UnitMesh> m_meshes; //メッシュパーツ
	
	//!}
	//-----------------------------------------------------------------------------
	// private methods.
	//----------------------------------------------------------------------------- 
	//!{
	
	/*****************************************************************//**
	 * \brief テクスチャ名をロード
	 * 
	 * \param fp ファイルポインタ
	 * \return ファイル名
	 *********************************************************************/
	std::string LoadTextureFileName(FILE* fp);
	
	/*****************************************************************//**
	 * \brief インデックスデータをロード
	 * 
	 * \param indices
	 * \param numIndex
	 * \param fp
	 *********************************************************************/
	template<class T>
	void LoadIndex(std::vector<T>& indices, int numIndex, FILE* fp);

	/*****************************************************************//**
	 * \brief マテリアルを構築
	 * 
	 * \param mdMat		マテリアルの構築先
	 * \param fp		ファイルポインタ
	 * \param filePath	読み込んでるmdファイルのファイルパス
	 *********************************************************************/
	void BuildMaterial(MD_Material& mdMat, FILE* fp, const char* filePath);

	//!} 

};
