/*****************************************************************//**
 * \file   Texture.h
 * \brief  テクスチャを扱うクラス
 * 
 * \author Hiroto Kuge
 * \date   October 2022
 *********************************************************************/

#pragma once

//=============================================================================
// Texture Class.
//=============================================================================
class Texture : public ShaderResource {
	//-----------------------------------------------------------------------------
	// list of friend classes and methods.
	//-----------------------------------------------------------------------------
	//!{
			/* Nothing */
	//!} 
public:
	//-----------------------------------------------------------------------------
	// public variables.
	//-----------------------------------------------------------------------------
	//!{
			/* Nothing */
	//!}
	//-----------------------------------------------------------------------------
	// public methods.
	//-----------------------------------------------------------------------------
	//!{
	//! 

	/*****************************************************************//**
	 * \brief コンストラクタ
	 *********************************************************************/
	Texture(){};

	/*****************************************************************//**
	 * \brief ファイルからテクスチャをロードするコンストラクタ
	 * 
	 * \param filePath ファイル名
	 *********************************************************************/
	explicit Texture(const wchar_t* filePath);


	/*****************************************************************//**
	 * \brief デストラクタ
	 *********************************************************************/
	~Texture();

	/*****************************************************************//**
	 * \brief DDSファイルから初期化
	 *  
	 * \param filePath		ロードするテクスチャファイルパス
	 *********************************************************************/
	void InitFromDDSFile(const wchar_t* filePath);
	
	/*****************************************************************//**
	 * \brief 
	 * 
	 * \param memory		テクスチャデータが格納されているメモリの先頭アドレス
	 * \param size			テクスチャサイズ
	 *********************************************************************/
	void InitFromMemory(const char* memory, unsigned int size);
	
	/*****************************************************************//**
	 * \brief D3Dリソースからテクスチャを初期化
	 *  
	 * \param texture D3Dリソース
	 *********************************************************************/
	void InitFromD3DResource(ID3D12Resource* texture);

	/*****************************************************************//**
	 * \brief シェーダーリソースビューに登録
	 *  
	 * \param descriptorHandle	CPUディスクリプタハンドル
	 * \param bufferNo			バッファ番号
	 *********************************************************************/
	void RegistShaderResourceView(D3D12_CPU_DESCRIPTOR_HANDLE descriptorHandle, int bufferNo);
	
	/*****************************************************************//**
	 * \brief テクスチャが有効か確認
	 *  
	 * \return true  有効
	 * \return false 有効ではない 
	 *********************************************************************/
	bool IsValid() const{
		return m_pTexture != nullptr;
	}
	
	/*****************************************************************//**
	 * \brief D3Dリソースとして取得
	 *  
	 * \return 
	 *********************************************************************/
	ID3D12Resource* Get(){
		return m_pTexture;
	}
	
	/*****************************************************************//**
	 * \brief テクスチャの幅を取得
	 *  
	 * \return 
	 *********************************************************************/
	uint32_t GetWidth() const{
		return static_cast<uint32_t>(m_textureDesc.Width);
	}
	
	/*****************************************************************//**
	 * \brief テクスチャの高さを取得
	 *  
	 * \return 
	 *********************************************************************/
	uint32_t GetHeight() const{
		return static_cast<uint32_t>(m_textureDesc.Height);
	}

	/*****************************************************************//**
	 * \brief テクスチャフォーマットを取得
	 *  
	 * \return テクスチャフォーマット
	 *********************************************************************/
	DXGI_FORMAT GetFormat() const{
		return m_textureDesc.Format;
	}
	
	//!} 
private:
	//-----------------------------------------------------------------------------
	// private variables.
	//-----------------------------------------------------------------------------
	//!{
	
	ID3D12Resource*			m_pTexture = nullptr;	//テクスチャ本体
	D3D12_RESOURCE_DESC		m_textureDesc;			//テクスチャ情報

	//!} 
	//-----------------------------------------------------------------------------
	// private methods,
	//-----------------------------------------------------------------------------
	//!{

	/*****************************************************************//**
	 * \brief DDSファイルからテクスチャをロード
	 *  
	 * \param filePath		ファイルパス
	 *********************************************************************/
	void LoadTextureFromDDSFile(const wchar_t* filePath);
	
	/*****************************************************************//**
	 * \brief メモリからテクスチャをロード
	 *
	 * \param memory テクスチャデータが格納されているメモリの先頭アドレス
	 * \param size	 テクスチャサイズ
	 *********************************************************************/
	void LoadTextureFromMemory(const char* memory, unsigned int size);

	//!} 
};