/*****************************************************************//**
 * \file   IndexBuffer.h
 * \brief  インデックスバッファクラス
 * 
 * \author Hiroto Kuge
 * \date   October 2022
 *********************************************************************/
#pragma once

//=============================================================================
// IndexBuffer Class
//=============================================================================
class IndexBuffer{
	//-----------------------------------------------------------------------------
	// list of friends classes and methods.
	//-----------------------------------------------------------------------------
	//!{
			/* Nothing */
	//!} 
public:
	//-----------------------------------------------------------------------------
	// public variables.
	//-----------------------------------------------------------------------------
	//!{
			/* Nothing */
	//!} 
	//-----------------------------------------------------------------------------
	// public methods.
	//-----------------------------------------------------------------------------
	//!{
	
	/*****************************************************************//**
	 * \brief コンストラクタ
	 *********************************************************************/
	IndexBuffer();

	/*****************************************************************//**
	 * \brief デストラクタ
	 *********************************************************************/
	~IndexBuffer();

	/*****************************************************************//**
	 * \brief 初期化処理
	 * \param pDevice	デバイス
	 * \param size		インデックスバッファサイズ
	 * \param pInitData	初期化データ(配列の先頭アドレス)
	 * \return true		初期化成功
	 * \return false	初期化失敗		
	 *********************************************************************/
	bool Init(
		ID3D12Device*	pDevice, 
		size_t			size, 
		const uint32_t* pInitData = nullptr);

	/*****************************************************************//**
	 * \brief 初期化処理
	 * 
	 * \param size	 サイズ
	 * \param stride ストライド(1要素のサイズ)
	 *********************************************************************/
	void Init(uint32_t size, uint32_t stride);

	/*****************************************************************//**
	 * \brief インデックスデータをインデックスバッファにコピー
	 * 
	 * \param srcIndecies コピー元のデータ
	 *********************************************************************/
	void Copy(uint16_t* srcIndecies);
	void Copy(uint32_t* srcIndecies);

	/*****************************************************************//**
	 * \brief ビューを取得
	 * \return インデックスバッファビュー
	 *********************************************************************/
	const D3D12_INDEX_BUFFER_VIEW& GetView() const{
		return m_indexBufferView;
	}

	/*****************************************************************//**
	 * \brief インデックス数を取得
	 * 
	 * \return インデックス数 
	 *********************************************************************/
	uint32_t GetCount()const {
		return m_count;
	}

	/*****************************************************************//**
	 * \brief インデックスバッファのストライド(1要素のサイズ)を取得
	 * 
	 * \return　ストライド(単位:バイト)
	 * \memo 2か4が帰ってくる
	 *********************************************************************/
	UINT GetStrideInByte() {
		return static_cast<UINT>(m_strideInBytes);
	}

	/*****************************************************************//**
	 * \brief インデックスバッファのサイズを取得
	 * 
	 * \return サイズ(単位：バイト) 
	 *********************************************************************/
	UINT GetSizeInBytes() const{
		return static_cast<UINT>(m_sizeInBytes);
	}

	/*****************************************************************//**
	 * \brief リソースのアドレスを取得
	 * 
	 * \return　リソースのアドレス 
	 *********************************************************************/
	ID3D12Resource* GetID3DResourceAddress() const{
		return m_pIndexBuffer.Get();
	}

	/*****************************************************************//**
	 * \brief 終了処理
	 *********************************************************************/
	void Term();

	/*****************************************************************//**
	 * \brief	メモリマッピング
	 * \return	マップ済みポインタ
	 *********************************************************************/
	uint32_t* Map();
	
	/*****************************************************************//**
	 * \brief メモリマッピングを解除
	 *********************************************************************/
	void Unmap();


	//!}
 
private:
	//-----------------------------------------------------------------------------
	// private variables.
	//-----------------------------------------------------------------------------
	//!{
	
	ComPtr<ID3D12Resource>	m_pIB;	// インデックスバッファ
	ComPtr<ID3D12Resource>	m_pIndexBuffer;	// インデックスバッファ
	D3D12_INDEX_BUFFER_VIEW m_view;	// インデックスバッファビュー
	D3D12_INDEX_BUFFER_VIEW m_indexBufferView;	// インデックスバッファビュー
	uint32_t m_count = 0;			//インデックスの数
	uint32_t m_strideInBytes = 0;	//ストライド:1要素のサイズ(単位：バイト)
	uint32_t m_sizeInBytes = 0;		//サイズ(単位：バイト)
	
	//!} 
	//-----------------------------------------------------------------------------
	// private methods.
	//-----------------------------------------------------------------------------
	//!{
	
	IndexBuffer(const IndexBuffer&) = delete;
	void operator = (const IndexBuffer&) = delete;
	
	//!} 
};