/*****************************************************************//**
 * \file   Shader.h
 * \brief  シェーダーオブジェクトクラス
 * 
 * \author Hiroto Kuge
 * \date   March 2023
 *********************************************************************/
#pragma once

//=============================================================================
// Shader Class
//=============================================================================
class Shader {
	//-----------------------------------------------------------------------------
	// list of friends classes and methods.
	//-----------------------------------------------------------------------------	
	//!{
			/* Nothing */
	//!} 
public:
	//-----------------------------------------------------------------------------
	// public variables.
	//-----------------------------------------------------------------------------
	//!{
			/* Nothing */
	//!} 
	//-----------------------------------------------------------------------------
	// public methods.
	//-----------------------------------------------------------------------------
	//!{

	/*****************************************************************//**
	 * \brief ピクセルシェーダーをロード
	 * 
	 * \param filePath		ファイルパス
	 * \param entryFuncName	エントリーポイントの関数名
	 *********************************************************************/
	void LoadPS(const char* filePath, const char* entryFuncName);
	
	/*****************************************************************//**
	 * \brief 頂点シェーダーをロード
	 * 
	 * \param filePath		ファイルパス
	 * \param entryFuncName	エントリーポイントの関数名
	 *********************************************************************/
	void LoadVS(const char* filePath, const char* entryFuncName);
	
	/*****************************************************************//**
	 * \brief コンピュートシェーダーをロード
	 * 
	 * \param filePath		ファイルパス
	 * \param entryFuncName	エントリーポイントの関数名
	 *********************************************************************/
	void LoadCS(const char* filePath, const char* entryFuncName);
	
	
	/*****************************************************************//**
	 * \brief csoファイルからシェーダーをロード
	 * 
	 * \param filePath	ファイルパス
	 *********************************************************************/
	void LoadPScso(const wchar_t* filePath);
	void LoadVScso(const wchar_t* filePath);
	
	/*****************************************************************//**
	 * \brief コンパイル済シェーダーデータを取得
	 * 
	 * \return コンパイル済シェーダー
	 *********************************************************************/
	ID3DBlob* GetCompiledBlob() const{
		return m_pBlob.Get();
	}

	/*****************************************************************//**
	 * \brief 初期化済か取得
	 * 
	 * \return 
	 *********************************************************************/
	bool IsInited() const{
		return m_isInited;
	}
	//!} 
private:
	//-----------------------------------------------------------------------------
	// private variables.
	//-----------------------------------------------------------------------------
	//!{
	
	ComPtr<ID3DBlob> m_pBlob;		//コンパイル済みのシェーダーデータ
	ComPtr<IDxcBlob> m_pDxcBlob;	//DXCコンパイラを使用したときのシェーダーデータ
	bool m_isInited = false;		//初期化済みかフラグ

	//!}
	//-----------------------------------------------------------------------------
	// private methods.
	//----------------------------------------------------------------------------- 
	
	/*****************************************************************//**
	 * \brief シェーダーをロード
	 * \param filePath		ファイルパス
	 * \param entryFuncName	エントリーモードの関数名
	 * \param shaderModel	シェーダーモデル
	 *********************************************************************/
	void Load(const char* filePath, const char* entryFuncName, const char* shaderModel);
	//!} 
};

